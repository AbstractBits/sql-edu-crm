create extension "pgcrypto";

create type gender as enum ('M', 'F');

create table if not exists countries (
	country_id int generated by default as identity primary key,
	country_name character varying(40) not null
);

create table if not exists states (
	state_id int generated by default as identity primary key,
	state_name character varying(40) not null,
	country_id int not null references countries(country_id)
);

create table if not exists users (
	user_id int generated by default as identity primary key,
	user_username character varying(40) not null,
	user_password character varying(60) not null,
	user_firstname character varying(20) not null,
	user_lastname character varying(20) not null,
	user_gender gender not null,
	user_birthday date not null,
	state_id int not null references states(state_id),
	user_is_active boolean default true,
	user_created_at timestamp with time zone default current_timestamp
);

create unique index username_idx on users (lower(user_username));

create table if not exists permissions (
	permission_id int generated by default as identity primary key,
	permission_action smallint not null,
	user_id int not null references users(user_id)
);

create table if not exists accounts (
	account_id int generated by default as identity primary key,
	account_balance decimal(15, 2) default 0,
	user_id int not null references users(user_id)
);

create table if not exists deposits (
	deposit_id int generated by default as identity primary key,
	deposit_amount decimal(15, 2) default 0,
	deposit_time timestamp with time zone default current_timestamp,
	account_id int not null references accounts(account_id),
	user_id int not null references users(user_id)
);

create table if not exists transfers (
	transfer_id int generated by default as identity primary key,
	transfer_amount decimal(15, 2) not null,
	transfer_time timestamp with time zone default current_timestamp,
	sender_id int not null references accounts(account_id),
	receiver_id int not null references accounts(account_id)
);

create table if not exists branches (
	branch_id int generated by default as identity primary key,
	branch_name character varying(64) not null
);

create table if not exists courses (
	course_id int generated by default as identity primary key,
	course_name character varying(64) not null
);

create unique index coursename_idx on courses (lower(course_name));

create table if not exists groups (
	group_id int generated by default as identity primary key,
	group_lessons smallint not null,
	group_price decimal(15, 2) not null,
	group_completed_at timestamp with time zone null,
	group_completed_lessons smallint default 0,
	course_id int not null references courses(course_id),
	branch_id int not null references branches(branch_id),
	user_id int not null references users (user_id)
);

create table if not exists lessons (
	lesson_id int generated by default as identity primary key,
	lesson_started_at timestamp with time zone default current_timestamp,
	lesson_finished_at timestamp with time zone null,
	group_id int not null references groups(group_id)
);

create table if not exists quotas (
	quota_id int generated by default as identity primary key,
	quota_raise smallint not null,
	group_id int not null references groups(group_id)
);

create table if not exists participants (
	participant_id int generated by default as identity primary key,
	participant_role smallint not null,
	participant_initial_lesson smallint default 0,
	participant_discount smallint null,
	quota_id int null references quotas(quota_id),
	group_id int not null references groups(group_id),
	user_id int not null references users(user_id)
);

create table if not exists group_transfers (
	group_transfer_id int generated by default as identity primary key,
	group_transfer_type smallint not null,
	lesson_count smallint not null,
	lesson_id int not null references lessons(lesson_id),
	participant_id int not null references participants(participant_id)
);

create table if not exists group_payments (
	group_payment_id int generated by default as identity primary key,
	transfer_id int not null references transfers(transfer_id),
	group_id int not null references groups(group_id)
);
